# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage:
  jobs:
  - job: STAGING
    pool:
      vmImage: ubuntu-latest

    steps:
    - script: |
        echo CHECK IF DOCKER IS INSTALLED ON RESOURCES
      displayName: 'DOCKER CHECK'
    - script: |
        echo DOCKER BUILD&PUSH or
      displayName: 'Build Image & Push To Dockerhub'

- stage: TESTING
  displayName: 'Backend Logic Testing'
  jobs:
  - job: Run_Validation_Script
    pool:
      vmImage: ubuntu-latest
    steps:

    - script: |
        echo INSTALL TERRAFORM
      displayName: 'Install Terraform'
    - script: |
        echo TERRAFORM INITIALIZE
      displayName: 'Initialize Terraform'
    - script: |
        echo TERRAFORM VALIDATE
      displayName: 'Validate State Resources'
    - script: |
        echo TERRAFORM PLAN
      displayName: 'Plan Resources'
    - script: |
        echo TERRAFORM APPLY
      displayName: 'Apply Resources'
    - script: |
        echo CONFIGURATION MANAGEMENT
      displayName: 'Ansible: Configure Resources'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'

    - script: python -m pip install --upgrade pip numpy
      displayName: 'Install numpy'

    - script: python validate_bots.py
      displayName: 'Run validation script'
      
    - script: |
        echo DESTROY THE RESOURCES WITH TERRAFORM
      displayName: 'Terraform Destroy'

- stage: PRODUCTION
  displayName: 'Deployment of Application '
  jobs:
  - job: Deploy_App
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo PERFORM ALL OF TERRAFORM AGAIN MINUS DESTROY
      displayName: Terraform tasks
    - script: |
        echo DOCKER PULL IMAGE FROM DOCKERHUB
      displayName: PULL DOCKER IMAGE
    - script: |
        echo DOCKER RUN CONTAINER ON TERRAFORM RESOURCE (simple VM)
      displayName: DEPLOY APP
    - script: |
        echo CHECK IF SUCCESFUL DEPLOYMENT WITH SIMPLE cURL CHECK
      displayName: cURL CHECK



# install python
# check if python script runs
# Execute validation script
# Add frontend microservice
# Unit test for microservice
# Load balancer test
# Some functionel tests if necessary


# 1) Build React App build (This also runs unit tests)
# 2) Send it to a repository manager such as Azure Artifacts for future pulling 
# 3) Use Terraform to spin-up resources quickly in order to deploy said build
# 4) Build docker image with the build react app
# 5) Push the image to dockerhub
# 6) Configure the created resources with ansible such as docker installation
# 7) Pull docker image to the resource from dockerhub
# 8) Check if app is running by performing a cURl
# 9) Perform some more tests such as a functional test, load balancing test
# Do exactly the same for the python backend app in parallel with the react app
# 10) Perform the input check with a test file for the backend app
# 11) If all green, go to next stage i.e. deployment of new code to production env.

